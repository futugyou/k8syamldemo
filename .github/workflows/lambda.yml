name: 'lambda'

on:
  workflow_dispatch:
  push:
    paths:
    - 06.terraform/aws/lambda/**
    - .github/workflows/lambda.yml
  pull_request:
    branches:
    - master
    paths:
    - 06.terraform/aws/lambda/**
    - .github/workflows/lambda.yml

permissions:
  contents: read

jobs:
  terraform:
    name: 'lambda'
    runs-on: ubuntu-latest
    env:
      working-directory: ./06.terraform/aws/lambda
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: genesis s3
      run: aws s3api create-bucket --bucket terraform-eks-code --region ${{secrets.AWS_REGION}} --create-bucket-configuration LocationConstraint=${{secrets.AWS_REGION}}
      continue-on-error: true
    
    - name: genesis dynamodb
      run: aws dynamodb create-table --table-name terraform_locks --region ${{secrets.AWS_REGION}} --billing-mode PAY_PER_REQUEST --attribute-definitions AttributeName=LockID,AttributeType=S --key-schema AttributeName=LockID,KeyType=HASH
      continue-on-error: true
      
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init --upgrade
      working-directory: ${{env.working-directory}}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ${{env.working-directory}}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ${{env.working-directory}}

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
      working-directory: ${{env.working-directory}}
